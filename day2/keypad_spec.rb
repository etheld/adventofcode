require "test/unit"
require_relative "keypad"

class TestSimpleNumber < Test::Unit::TestCase

  def test_UL_should_give_0_0
    p = Position.new(0, 0)
    p.move("L")
    p.move("L")
    assert_equal(0, p.posx)
    assert_equal(0, p.posy)
  end

  def test_field_value_for_0_0_should_be_1
    p = Position.new(0, 0)
    assert_equal(1, p.field_value())
  end

  def test_field_value_for_0_1_should_be_2
    p = Position.new(1, 0)
    assert_equal(2, p.field_value())
  end

  def test_field_value_for_0_2_should_be_3
    p = Position.new(2, 0)
    assert_equal(3, p.field_value())
  end

  def test_field_value_for_0_1_should_be_4
    p = Position.new(0, 1)
    assert_equal(4, p.field_value())
  end

  def test_field_value_for_1_1_should_be_5
    p = Position.new(1, 1)
    assert_equal(5, p.field_value())
  end

  def test_field_value_for_1_1_should_be_6
    p = Position.new(2, 1)
    assert_equal(6, p.field_value())
  end

  def test_field_value_for_2_0_should_be_7
    p = Position.new(2, 0)
    assert_equal(7, p.field_value())
  end

  def test_field_value_for_2_1_should_be_8
    p = Position.new(2, 1)
    assert_equal(8, p.field_value())
  end

  def test_field_value_for_2_2_should_be_9
    p = Position.new(2, 2)
    assert_equal(9, p.field_value())
  end

  def test_field_value_for_2_2_should_be_1
    p = Position.new(2, 2)
    assert_equal(9, p.field_value())
  end

  def test_ULUL_should_0_0
    p = Position.new(0, 0)
    p.parseLines("ULUL")
    assert_equal(0, p.posx)
    assert_equal(0, p.posy)
    assert_equal([1,1,1,1], p.code)
  end

  def test_ULUL_should_0_0
    p = Position.new(1, 1)
    p.parseLines("ULL")
    assert_equal(0, p.posx)
    assert_equal(0, p.posy)
    p.parseLines("RRDDD")
    assert_equal(2, p.posx)
    assert_equal(2, p.posy)
    p.parseLines("LURDL")
    assert_equal(1, p.posx)
    assert_equal(2, p.posy)
    p.parseLines("UUUUD")
    assert_equal(1, p.posx)
    assert_equal(1, p.posy)
    assert_equal([1,9,8,5], p.code)
  end

  def test_validmove()
    p = Position.new(2, 2)
    p.parseLines("ULL")
    assert_equal(1, p.posx)
    assert_equal(1, p.posy)
  end
  def test_solution
    p = Position.new(1, 1)
    p.parseLines("LLLRLLULLDDLDUDRDDURLDDRDLRDDRUULRULLLDLUURUUUDLUUDLRUDLDUDURRLDRRRUULUURLUDRURULRLRLRRUULRUUUDRRDDRLLLDDLLUDDDLLRLLULULRRURRRLDRLDLLRURDULLDULRUURLRUDRURLRRDLLDDURLDDLUDLRLUURDRDRDDUURDDLDDDRUDULDLRDRDDURDLUDDDRUDLUDLULULRUURLRUUUDDRLDULLLUDLULDUUDLDLRRLLLRLDUDRUULDLDRDLRRDLDLULUUDRRUDDDRDLRLDLRDUDRULDRDURRUULLUDURURUUDRDRLRRDRRDRDDDDLLRURULDURDLUDLUULDDLLLDULUUUULDUDRDURLURDLDDLDDUULRLUUDLDRUDRURURRDDLURURDRLRLUUUURLLRR")
    p.parseLines("UUUUURRRURLLRRDRLLDUUUUDDDRLRRDRUULDUURURDRLLRRRDRLLUDURUDLDURURRLUDLLLDRDUDRDRLDRUDUDDUULLUULLDUDUDDRDUUUDLULUDUULLUUULURRUDUULDUDDRDURRLDDURLRDLULDDRUDUDRDULLRLRLLUUDDURLUUDLRUUDDLLRUURDUDLLDRURLDURDLRDUUDLRLLRLRURRUDRRLRDRURRRUULLUDLDURDLDDDUUDRUUUDULLLRDRRDRLURDDRUUUDRRUUDLUDDDRRRRRLRLDLLDDLRDURRURLLLULURULLULRLLDDLDRLDULLDLDDDRLUDDDUDUDRRLRDLLDULULRLRURDLUDDLRUDRLUURRURDURDRRDRULUDURRLULUURDRLDLRUDLUDRURLUDUUULRRLRRRULRRRLRLRLULULDRUUDLRLLRLLLURUUDLUDLRURUDRRLDLLULUDRUDRLLLRLLDLLDUDRRURRLDLUUUURDDDUURLLRRDRUUURRRDRUDLLULDLLDLUDRRDLLDDLDURLLDLLDLLLDR")
    p.parseLines("LRDULUUUDLRUUUDURUUULLURDRURDRRDDDLRLRUULDLRRUDDLLUURLDRLLRUULLUDLUDUDRDRDLUUDULLLLRDDUDRRRURLRDDLRLDRLULLLRUUULURDDLLLLRURUUDDDLDUDDDDLLLURLUUUURLRUDRRLLLUUULRDUURDLRDDDUDLLRDULURURUULUDLLRRURDLUULUUDULLUDUUDURLRULRLLDLUULLRRUDDULRULDURRLRRLULLLRRDLLDDLDUDDDUDLRUURUDUUUDDLRRDLRUDRLLRDRDLURRLUDUULDRRUDRRUDLLLLRURRRRRUULULLLRDRDUDRDDURDLDDUURRURLDRRUDLRLLRRURULUUDDDLLLRDRLULLDLDDULDLUUDRURULLDLLLLDRLRRLURLRULRDLLULUDRDR")
    p.parseLines("RURRRUDLURRURLURDDRULLDRDRDRRULRRDLDDLDUUURUULLRRDRLDRRDRULLURRRULLLDULDDDDLULRUULRURUDURDUDRLRULLLRDURDDUDDRDLURRURUURDLDDDDDURURRURLLLDDLDRRDUDDLLLDRRLDDUUULDLLDRUURUDDRRLDUULRRDDUDRUULRLDLRLRUURLLDRDLDRLURULDLULDRULURLLRRLLDDDURLRUURUULULRLLLULUDULUUULDRURUDDDUUDDRDUDUDRDLLLRDULRLDLRRDRRLRDLDDULULRLRUUDDUDRRLUDRDUUUDRLLLRRLRUDRRLRUUDDLDURLDRRRUDRRDUDDLRDDLULLDLURLUUDLUDLUDLDRRLRRRULDRLRDUURLUULRDURUDUUDDURDDLRRRLUUUDURULRURLDRURULDDUDDLUDLDLURDDRRDDUDUUURLDLRDDLDULDULDDDLDRDDLUURDULLUDRRRULRLDDLRDRLRURLULLLDULLUUDURLDDULRRDDUULDRLDLULRRDULUDUUURUURDDDRULRLRDLRRURR")
    p.parseLines("UDDDRLDRDULDRLRDUDDLDLLDDLUUURDDDLUDRDUDLDURLUURUDUULUUULDUURLULLRLUDLLURUUUULRLRLLLRRLULLDRUULURRLLUDUDURULLLRRRRLRUULLRDRDRRDDLUDRRUULUDRUULRDLRDRRLRRDRRRLULRULUURRRULLRRRURUDUURRLLDDDUDDULUULRURUDUDUDRLDLUULUDDLLLLDRLLRLDULLLRLLDLUUDURDLLRURUUDDDDLLUDDRLUUDUDRDRLLURURLURRDLDDDULUURURURRLUUDUDLDLDDULLURUDLRLDLRLDLDUDULURDUDRLURRRULLDDDRDRURDDLDLULUDRUULDLULRDUUURLULDRRULLUDLDRLRDDUDURRRURRLRDUULURUUDLULDLRUUULUDRDRRUDUDULLDDRLRDLURDLRLUURDRUDRDRUDLULRUDDRDLLLRLURRURRLDDDUDDLRDRRRULLUUDULURDLDRDDDLDURRLRRDLLDDLULULRRDUDUUDUULRDRRDURDDDDUUDDLUDDUULDRDDULLUUUURRRUUURRULDRRDURRLULLDU")

    puts p.code
  end


end
